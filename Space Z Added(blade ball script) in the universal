		}):Play()
		TweenService:Create(Converted["_Header"], tween_info, {
			Size = UDim2.new(0, 624 * scale, 0, 24 * scale),
			Position = UDim2.new(0.0125, 0, 0.0225352105, 0)
		}):Play()
		
		for _, tabData in pairs(Config.Tabs) do
			if tabData.LeftSection then tabData.LeftSection.Visible = Config.CurrentTab and tabData.Tab.Name == Config.CurrentTab end
			if tabData.RightSection then tabData.RightSection.Visible = Config.CurrentTab and tabData.Tab.Name == Config.CurrentTab end
		end
		
		Converted["_Tabs"].Visible = true
		Converted["_Sections"].Visible = true
		Converted["_SearchBar"].Visible = true
		Converted["_Client"].Visible = true
		Converted["_Header"].FindFirstChild("Icon").Visible = true
	else
		local small_width = 104.5 * scale
		local small_height = 24 * scale
		target_abs_size = Vector2.new(small_width, small_height)
		target_pos_abs = current_center - (target_abs_size / 2)
		local target_pos = UDim2.new(0, target_pos_abs.X, 0, target_pos_abs.Y)
		local target_size = UDim2.new(0, small_width, 0, small_height)
		TweenService:Create(Converted["_Container"], tween_info, {
			Size = target_size,
			Position = target_pos
		}):Play()
		TweenService:Create(Converted["_Header"], tween_info, {
			Size = UDim2.new(0, small_width, 0, small_height),
			Position = UDim2.new(0, 0, 0, 0)
		}):Play()
		
		for _, tabData in pairs(Config.Tabs) do
			if tabData.LeftSection then tabData.LeftSection.Visible = false end
			if tabData.RightSection then tabData.RightSection.Visible = false end
		end
		
		Converted["_Tabs"].Visible = false
		Converted["_Sections"].Visible = false
		Converted["_SearchBar"].Visible = false
		Converted["_Client"].Visible = false
		Converted["_Header"].FindFirstChild("Icon").Visible = false
	end
end

local function CreateTween(object, info, properties)
	local tween = TweenService:Create(object, info, properties)
	tween:Play()
	return tween
end

local function SaveValue(name, valueType, value)
	local val = ConfigFolder:FindFirstChild(name)
	if not val then
		if valueType == "Bool" then
			val = Instance.new("BoolValue")
		elseif valueType == "Int" then
			val = Instance.new("IntValue")
		elseif valueType == "String" then
			val = Instance.new("StringValue")
		end
		val.Name = name
		val.Parent = ConfigFolder
	end
	if valueType == "Bool" then
		val.Value = value
	elseif valueType == "Int" then
		val.Value = value
	elseif valueType == "String" then
		val.Value = tostring(value)
	end
end

local function LoadValue(name, default, valueType)
	local val = ConfigFolder:FindFirstChild(name)
	if val and val:IsA(valueType .. "Value") then
		if valueType == "Bool" then
			return val.Value
		elseif valueType == "Int" then
			return val.Value
		elseif valueType == "String" then
			return val.Value
		end
	end
	return default
end

local function GetDevice()
	return Library._device == 'Mobile' or Library._device == 'Tablet'
end

function FlowUI.new()
	local self = setmetatable({}, FlowUI)
	
	Library:get_device()
	Library:get_screen_scale()
	
	ConfigFolder = Instance.new("Folder")
	ConfigFolder.Name = "Flow"
	ConfigFolder.Parent = game:GetService("CoreGui")
	
	self:SetupGUI()
	self:SetupEvents()
	return self
end

function FlowUI:SetupGUI()
	Converted["_Flow"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Converted["_Flow"].Name = "Flow"
	Converted["_Flow"].Parent = game:GetService("CoreGui")
	
	Converted["_Container"].Active = true
	Converted["_Container"].BackgroundColor3 = Color3.fromRGB(13, 13, 13)
	Converted["_Container"].BackgroundTransparency = 0.1
	Converted["_Container"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Container"].BorderSizePixel = 0
	Converted["_Container"].Size = UDim2.new(0, 640 * Library._ui_scale, 0, 355 * Library._ui_scale)
	Converted["_Container"].Name = "Container"
	Converted["_Container"].Parent = Converted["_Flow"]
	
	Converted["_UIScale"].Parent = Converted["_Container"]
	Converted["_UIScale"].Scale = 1
	
	Converted["_Container"].AnchorPoint = Vector2.new(0, 0)
	local vp = workspace.CurrentCamera.ViewportSize
	local abs_size = Vector2.new(640 * Library._ui_scale, 355 * Library._ui_scale)
	local init_x = (vp.X - abs_size.X) / 2
	local init_y = (vp.Y * 0.493500471) - (abs_size.Y / 2)
	Converted["_Container"].Position = UDim2.new(0, init_x, 0, init_y)
	
	workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(function()
		if Library._dragging then return end
		Library:get_device()
		Library:get_screen_scale()
		local current_vp = workspace.CurrentCamera.ViewportSize
		local current_abs_size = Vector2.new(640 * Library._ui_scale, 355 * Library._ui_scale)
		local target_x = (current_vp.X - current_abs_size.X) / 2
		local target_y = (current_vp.Y * 0.493500471) - (current_abs_size.Y / 2)
		Converted["_Container"].Size = UDim2.new(0, current_abs_size.X, 0, current_abs_size.Y)
		Converted["_Container"].Position = UDim2.new(0, target_x, 0, target_y)
	end)
	
	Converted["_Frame"].AnchorPoint = Vector2.new(0.5, 0.5)
	Converted["_Frame"].BackgroundTransparency = 1
	Converted["_Frame"].Position = UDim2.new(0.5, 0, 0.5, 0)
	Converted["_Frame"].Size = UDim2.new(0.95, 0, 0.95, 0)
	Converted["_Frame"].Parent = Converted["_Container"]
	
	Converted["_UICorner"].CornerRadius = UDim.new(0, 10 * Library._ui_scale)
	Converted["_UICorner"].Parent = Converted["_Container"]
	
	Converted["_Header"].BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	Converted["_Header"].BackgroundTransparency = 0.5
	Converted["_Header"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Header"].BorderSizePixel = 0
	Converted["_Header"].Position = UDim2.new(0.0125, 0, 0.0225352105, 0)
	Converted["_Header"].Size = UDim2.new(0, 624 * Library._ui_scale, 0, 24 * Library._ui_scale)
	Converted["_Header"].Name = "Header"
	Converted["_Header"].Parent = Converted["_Container"]
	
	Converted["_UICorner1"].CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	Converted["_UICorner1"].Parent = Converted["_Header"]
	
	local Icon = Instance.new("ImageLabel")
	Icon.Name = "Icon"
	Icon.Size = UDim2.new(0, 20 * Library._ui_scale, 0, 20 * Library._ui_scale)
	Icon.Position = UDim2.new(0.02, 0, 0.5, 0)
	Icon.AnchorPoint = Vector2.new(0, 0.5)
	Icon.BackgroundTransparency = 1
	Icon.Visible = true
	Icon.Parent = Converted["_Header"]
	
	local gifFrames = {
		'rbxassetid://102347466457412',
		'rbxassetid://108245437933275',
		'rbxassetid://75740598430543',
		'rbxassetid://79416194850484',
		'rbxassetid://105289533051099',
		'rbxassetid://118993525169416',
		'rbxassetid://117023058747198',
		'rbxassetid://120000264220049',
		'rbxassetid://127406027575419',
	}
	
	task.spawn(function()
		local frame = 1
		while Icon and Icon.Parent do
			Icon.Image = gifFrames[frame]
			frame = frame + 1
			if frame > #gifFrames then frame = 1 end
			wait(0.1)
		end
	end)
	
	Converted["_Client"].Font = Enum.Font.GothamBold
	Converted["_Client"].Text = "Anerial"
	Converted["_Client"].TextColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Client"].TextScaled = true
	Converted["_Client"].TextSize = 14 * Library._ui_scale
	Converted["_Client"].TextWrapped = true
	Converted["_Client"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Client"].AnchorPoint = Vector2.new(0, 0.5)
	Converted["_Client"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Client"].BackgroundTransparency = 1
	Converted["_Client"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Client"].BorderSizePixel = 0
	Converted["_Client"].Position = UDim2.new(0.08, 0, 0.5, 0)
	Converted["_Client"].Size = UDim2.new(0, 78 * Library._ui_scale, 0, 12 * Library._ui_scale)
	Converted["_Client"].Name = "Client"
	Converted["_Client"].Parent = Converted["_Header"]
	
	Converted["_UITextSizeConstraint"].MaxTextSize = 12 * Library._ui_scale
	Converted["_UITextSizeConstraint"].MinTextSize = 12 * Library._ui_scale
	Converted["_UITextSizeConstraint"].Parent = Converted["_Client"]
	
	self:SetupSearchBar()
	
	self:SetupTabs()
	
	self:SetupSections()
	
	self:SetupMobileButton()
end
      
function FlowUI:SetupSearchBar()
	Converted["_SearchBar"].AnchorPoint = Vector2.new(1, 0.5)
	Converted["_SearchBar"].BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	Converted["_SearchBar"].BackgroundTransparency = 0.5
	Converted["_SearchBar"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_SearchBar"].BorderSizePixel = 0
	Converted["_SearchBar"].Position = UDim2.new(0.995, 0, 0.5, 0)
	Converted["_SearchBar"].Size = UDim2.new(0, 64 * Library._ui_scale, 0, 17 * Library._ui_scale)
	Converted["_SearchBar"].Name = "SearchBar"
	Converted["_SearchBar"].Parent = Converted["_Header"]
	
	Converted["_UICorner2"].CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	Converted["_UICorner2"].Parent = Converted["_SearchBar"]
	
	Converted["_Input"].ClearTextOnFocus = false
	Converted["_Input"].Font = Enum.Font.Gotham
	Converted["_Input"].PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].PlaceholderText = "Search"
	Converted["_Input"].Text = ""
	Converted["_Input"].TextColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].TextSize = 10 * Library._ui_scale
	Converted["_Input"].TextTransparency = 0.5
	Converted["_Input"].TextWrapped = true
	Converted["_Input"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Input"].AnchorPoint = Vector2.new(0, 0.5)
	Converted["_Input"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].BackgroundTransparency = 1
	Converted["_Input"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Input"].BorderSizePixel = 0
	Converted["_Input"].Position = UDim2.new(0, 0, 0.5, 0)
	Converted["_Input"].Size = UDim2.new(0, 39 * Library._ui_scale, 0, 14 * Library._ui_scale)
	Converted["_Input"].Name = "Input"
	Converted["_Input"].Parent = Converted["_SearchBar"]
	
	Converted["_UITextSizeConstraint1"].MaxTextSize = 10 * Library._ui_scale
	Converted["_UITextSizeConstraint1"].MinTextSize = 10 * Library._ui_scale
	Converted["_UITextSizeConstraint1"].Parent = Converted["_Input"]
	
	Converted["_UIPadding"].PaddingLeft = UDim.new(0, 9 * Library._ui_scale)
	Converted["_UIPadding"].Parent = Converted["_SearchBar"]
end

function FlowUI:SetupTabs()
	Converted["_Tabs"].AutomaticCanvasSize = Enum.AutomaticSize.X
	Converted["_Tabs"].CanvasSize = UDim2.new(0, 0, 0.5, 0)
	Converted["_Tabs"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Tabs"].ScrollBarImageTransparency = 1
	Converted["_Tabs"].ScrollBarThickness = 0
	Converted["_Tabs"].Active = true
	Converted["_Tabs"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Tabs"].BackgroundTransparency = 1
	Converted["_Tabs"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Tabs"].BorderSizePixel = 0
	Converted["_Tabs"].Position = UDim2.new(0.0125, 0, 0.109859154, 0)
	Converted["_Tabs"].Size = UDim2.new(0, 138 * Library._ui_scale, 0, 308 * Library._ui_scale)
	Converted["_Tabs"].Name = "Tabs"
	Converted["_Tabs"].Parent = Converted["_Container"]
	
	Converted["_UIListLayout"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
	Converted["_UIListLayout"].Parent = Converted["_Tabs"]
end

function FlowUI:SetupSections()
	Converted["_Sections"].Name = "Sections"
	Converted["_Sections"].Parent = Converted["_Container"]
	
	Converted["_LeftSection"].AutomaticCanvasSize = Enum.AutomaticSize.XY
	Converted["_LeftSection"].CanvasSize = UDim2.new(0, 0, 0, 0)
	Converted["_LeftSection"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_LeftSection"].ScrollBarImageTransparency = 1
	Converted["_LeftSection"].ScrollBarThickness = 0
	Converted["_LeftSection"].Active = true
	Converted["_LeftSection"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_LeftSection"].BackgroundTransparency = 1
	Converted["_LeftSection"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_LeftSection"].BorderSizePixel = 0
	Converted["_LeftSection"].Position = UDim2.new(0.24, 0, 0.11, 0)
	Converted["_LeftSection"].Size = UDim2.new(0, 237 * Library._ui_scale, 0, 306 * Library._ui_scale)
	Converted["_LeftSection"].Name = "LeftSection"
	Converted["_LeftSection"].Parent = Converted["_Sections"]
	
	Converted["_UIListLayout1"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout1"].Parent = Converted["_LeftSection"]
	
	Converted["_RightSection"].AutomaticCanvasSize = Enum.AutomaticSize.XY
	Converted["_RightSection"].CanvasSize = UDim2.new(0, 0, 0, 0)
	Converted["_RightSection"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_RightSection"].ScrollBarImageTransparency = 1
	Converted["_RightSection"].ScrollBarThickness = 0
	Converted["_RightSection"].Active = true
	Converted["_RightSection"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_RightSection"].BackgroundTransparency = 1
	Converted["_RightSection"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_RightSection"].BorderSizePixel = 0
	Converted["_RightSection"].Position = UDim2.new(0.62, 0, 0.11, 0)
	Converted["_RightSection"].Size = UDim2.new(0, 237 * Library._ui_scale, 0, 306 * Library._ui_scale)
	Converted["_RightSection"].Name = "RightSection"
	Converted["_RightSection"].Parent = Converted["_Sections"]
	
	Converted["_UIListLayout4"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout4"].SortOrder = Enum.SortOrder.LayoutOrder
	Converted["_UIListLayout4"].Parent = Converted["_RightSection"]
end

function FlowUI:SetupMobileButton()
	if GetDevice() then
		Converted["_Mobile"].Font = Enum.Font.SourceSans
		Converted["_Mobile"].Text = ""
		Converted["_Mobile"].TextColor3 = Color3.fromRGB(0, 0, 0)
		Converted["_Mobile"].TextSize = 14 * Library._ui_scale
		Converted["_Mobile"].AutoButtonColor = false
		Converted["_Mobile"].AnchorPoint = Vector2.new(0.5, 0)
		Converted["_Mobile"].BackgroundColor3 = Color3.fromRGB(13, 13, 13)
		Converted["_Mobile"].BackgroundTransparency = 0.1
		Converted["_Mobile"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		Converted["_Mobile"].BorderSizePixel = 0
		Converted["_Mobile"].Position = UDim2.new(0.5, 0, 0.902557433, 0)
		Converted["_Mobile"].Size = UDim2.new(0.0360920988, 0, 0.0440097786, 0)
		Converted["_Mobile"].Name = "Mobile"
		Converted["_Mobile"].Parent = Converted["_Flow"]
		
		Converted["_UICorner10"].CornerRadius = UDim.new(0, 10 * Library._ui_scale)
		Converted["_UICorner10"].Parent = Converted["_Mobile"]
		
		Converted["_UIAspectRatioConstraint1"].AspectRatio = 1.6111111640930176
		Converted["_UIAspectRatioConstraint1"].Parent = Converted["_Mobile"]
	end
end

function FlowUI:SetupEvents()
	if Converted["_Mobile"] then
		Converted["_Mobile"].MouseButton1Click:Connect(function()
			Library._ui_open = not Library._ui_open
			Library:change_visibility(Library._ui_open)
		end)
	end
	
	Converted["_Input"].Changed:Connect(function(property)
		if property == "Text" then
			self:FilterContent(Converted["_Input"].Text)
		end
	end)
	
	local moveConnection
	local function startDrag(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			Library._dragging = true
			Library._drag_start = Vector2.new(input.Position.X, input.Position.Y)
			Library._start_pos = Converted["_Container"].AbsolutePosition
			
			moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
				if Library._dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then
					local delta = Vector2.new(inputChange.Position.X, inputChange.Position.Y) - Library._drag_start
					local new_pos = Library._start_pos + delta
					local viewport = workspace.CurrentCamera.ViewportSize
					local containerSize = Converted["_Container"].AbsoluteSize
					
					new_pos = Vector2.new(
						math.clamp(new_pos.X, 0, viewport.X - containerSize.X),
						math.clamp(new_pos.Y, 0, viewport.Y - containerSize.Y)
					)
					
					Converted["_Container"].Position = UDim2.new(0, new_pos.X, 0, new_pos.Y)
				end
			end)
		end
	end
	
	local function stopDrag(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			Library._dragging = false
			if moveConnection then
				moveConnection:Disconnect()
			end
		end
	end
	
	Converted["_Header"].InputBegan:Connect(startDrag)
	
	UserInputService.InputEnded:Connect(stopDrag)
end

function FlowUI:CreateTab(name, icon)
	local tab = Converted["_Tab"]:Clone()
	tab.Name = name
	tab.Parent = Converted["_Tabs"]
	
	tab.Font = Enum.Font.SourceSans
	tab.Text = ""
	tab.TextColor3 = Color3.fromRGB(0, 0, 0)
	tab.TextSize = 14 * Library._ui_scale
	tab.AutoButtonColor = false
	tab.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	tab.BackgroundTransparency = 0.5
	tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
	tab.BorderSizePixel = 0
	tab.Size = UDim2.new(0, 138 * Library._ui_scale, 0, 27 * Library._ui_scale)
	
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	corner.Parent = tab
	
	local iconLabel = tab:FindFirstChild("Icon") or Instance.new("ImageLabel")
	iconLabel.Name = "Icon"
	iconLabel.Image = icon or "rbxassetid://10709810463"
	iconLabel.AnchorPoint = Vector2.new(0, 0.5)
	iconLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	iconLabel.BackgroundTransparency = 1
	iconLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	iconLabel.BorderSizePixel = 0
	iconLabel.Position = UDim2.new(0.1, 0, 0.5, 0)
	iconLabel.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	iconLabel.Parent = tab
	
	local titleLabel = tab:FindFirstChild("Title") or Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.Gotham
	titleLabel.Text = name
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0.225, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 75 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = tab
	
	local textConstraint = Instance.new("UITextSizeConstraint")
	textConstraint.MaxTextSize = 12 * Library._ui_scale
	textConstraint.MinTextSize = 12 * Library._ui_scale
	textConstraint.Parent = titleLabel
	
	tab.MouseButton1Click:Connect(function()
		self:SelectTab(name)
	end)
	
	local leftSection = Instance.new("Frame")
	leftSection.Name = name .. "_Left"
	leftSection.BackgroundTransparency = 1
	leftSection.Size = UDim2.new(1, 0, 1, 0)
	leftSection.Visible = false
	leftSection.Parent = Converted["_LeftSection"]
	
	local leftLayout = Instance.new("UIListLayout")
	leftLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
	leftLayout.Parent = leftSection
	
	local rightSection = Instance.new("Frame")
	rightSection.Name = name .. "_Right"
	rightSection.BackgroundTransparency = 1
	rightSection.Size = UDim2.new(1, 0, 1, 0)
	rightSection.Visible = false
	rightSection.Parent = Converted["_RightSection"]
	
	local rightLayout = Instance.new("UIListLayout")
	rightLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
	rightLayout.Parent = rightSection
	
	local modules = {}
	
	Config.Tabs[name] = {
		Tab = tab,
		LeftSection = leftSection,
		RightSection = rightSection,
		Modules = modules
	}
	
	if not Config.CurrentTab then
		self:SelectTab(name)
	end
	
	return {
		Tab = tab,
		LeftSection = leftSection,
		RightSection = rightSection,
		Modules = modules
	}
end

function FlowUI:SelectTab(name)
	for tabName, tabData in pairs(Config.Tabs) do
		tabData.Tab.BackgroundTransparency = 0.5
		tabData.LeftSection.Visible = false
		tabData.RightSection.Visible = false
	end
	
	if Config.Tabs[name] then
		Config.Tabs[name].Tab.BackgroundTransparency = 0.2
		Config.Tabs[name].LeftSection.Visible = true
		Config.Tabs[name].RightSection.Visible = true
		Config.CurrentTab = name
	end
end

function FlowUI:FilterContent(searchText)
	local lowerSearch = string.lower(searchText)
	if lowerSearch == "" then
		for _, tabData in pairs(Config.Tabs) do
			tabData.Tab.Visible = true
			for _, module in pairs(tabData.Modules) do
				module.Module.Visible = true
			end
		end
		return
	end
	
	for _, tabData in pairs(Config.Tabs) do
		tabData.Tab.Visible = false
		for _, module in pairs(tabData.Modules) do
			module.Module.Visible = false
		end
	end
	
	for tabName, tabData in pairs(Config.Tabs) do
		local tabMatch = string.find(string.lower(tabName), lowerSearch) ~= nil
		local hasMatchingModule = false
		
		for _, module in pairs(tabData.Modules) do
			local moduleMatch = string.find(string.lower(module.Module.Name), lowerSearch) ~= nil
			module.Module.Visible = tabMatch or moduleMatch
			if moduleMatch then
				hasMatchingModule = true
			end
		end
		
		tabData.Tab.Visible = tabMatch or hasMatchingModule
	end
end

function FlowUI:CreateModule(tabName, moduleName, side, callback)
    side = side or "Left"
    local tabData = Config.Tabs[tabName]
    if not tabData then return end
    local section = tabData[side .. "Section"]
    if not section then return end
    
    local module = Instance.new("Frame")
    module.Name = moduleName
    module.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
    module.BackgroundTransparency = 0.5
    module.BorderColor3 = Color3.fromRGB(0, 0, 0)
    module.BorderSizePixel = 0
    module.ClipsDescendants = true
    module.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale)
    module.Parent = section
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
    corner.Parent = module
    
    local header = Instance.new("ImageButton")
    header.Name = "Header"
    header.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    header.BackgroundTransparency = 0.5
    header.BorderColor3 = Color3.fromRGB(0, 0, 0)
    header.BorderSizePixel = 0
    header.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale)
    header.Parent = module
    
    local headerCorner = Instance.new("UICorner")
    headerCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
    headerCorner.Parent = header
    
    local keybind = Instance.new("TextButton")
    keybind.Name = "Keybind"
    keybind.Font = Enum.Font.SourceSans
    keybind.Text = ""
    keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
    keybind.TextSize = 14 * Library._ui_scale
    keybind.AutoButtonColor = false
    keybind.AnchorPoint = Vector2.new(1, 0.5)
    keybind.BackgroundTransparency = 1
    keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
    keybind.BorderSizePixel = 0
    keybind.Position = UDim2.new(1, -33 * Library._ui_scale, 0.5, 0) -- Moved to right
    keybind.Size = UDim2.new(0, 33 * Library._ui_scale, 0, 28 * Library._ui_scale)
    keybind.Parent = header
    
    local background = Instance.new("Frame")
    background.Name = "Background"
    background.AnchorPoint = Vector2.new(0.5, 0.5)
    background.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
    background.BackgroundTransparency = 0.5
    background.BorderColor3 = Color3.fromRGB(0, 0, 0)
    background.BorderSizePixel = 0
    background.Position = UDim2.new(0.5, 0, 0.5, 0)
    background.Size = UDim2.new(0, 20 * Library._ui_scale, 0, 20 * Library._ui_scale)
    background.Parent = keybind
    
    local backgroundCorner = Instance.new("UICorner")
    backgroundCorner.CornerRadius = UDim.new(0, 4 * Library._ui_scale)
    backgroundCorner.Parent = background
    
    local keyString = Instance.new("TextLabel")
    keyString.Name = "String"
    keyString.Font = Enum.Font.Gotham
    keyString.Text = "F"
    keyString.TextColor3 = Color3.fromRGB(255, 255, 255)
    keyString.TextSize = 10 * Library._ui_scale
    keyString.TextTransparency = 0.5
    keyString.AnchorPoint = Vector2.new(0.5, 0.5)
    keyString.BackgroundTransparency = 1
    keyString.BorderColor3 = Color3.fromRGB(0, 0, 0)
    keyString.BorderSizePixel = 0
    keyString.Position = UDim2.new(0.5, 0, 0.5, 0)
    keyString.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
    keyString.Visible = true
    keyString.Parent = background
    
    local stringConstraint = Instance.new("UITextSizeConstraint")
    stringConstraint.MaxTextSize = 11 * Library._ui_scale
    stringConstraint.MinTextSize = 11 * Library._ui_scale
    stringConstraint.Parent = keyString
    
    local delete = Instance.new("ImageLabel")
    delete.Name = "Delete"
    delete.Image = "rbxassetid://79831062733212"
    delete.AnchorPoint = Vector2.new(0.5, 0.5)
    delete.BackgroundTransparency = 1
    delete.BorderSizePixel = 0
    delete.Position = UDim2.new(0.5, 0, 0.5, 0)
    delete.Size = UDim2.new(0, 10 * Library._ui_scale, 0, 10 * Library._ui_scale)
    delete.Visible = false
    delete.Parent = background
    
    local edit = Instance.new("ImageLabel")
    edit.Name = "Edit"
    edit.Image = "rbxassetid://10734887784"
    edit.AnchorPoint = Vector2.new(0.5, 0.5)
    edit.BackgroundTransparency = 1
    edit.BorderSizePixel = 0
    edit.Position = UDim2.new(0.5, 0, 0.5, 0)
    edit.Size = UDim2.new(0, 10 * Library._ui_scale, 0, 10 * Library._ui_scale)
    edit.Visible = false
    edit.Parent = background
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Font = Enum.Font.GothamBold
    title.Text = moduleName
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.TextScaled = true
    title.TextSize = 14 * Library._ui_scale
    title.TextTransparency = 0.5
    title.TextWrapped = true
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.AnchorPoint = Vector2.new(0, 0.5)
    title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    title.BackgroundTransparency = 1
    title.BorderColor3 = Color3.fromRGB(0, 0, 0)
    title.BorderSizePixel = 0
    title.Position = UDim2.new(0.05, 0, 0.5, 0) -- Adjusted for left alignment
    title.Size = UDim2.new(0, 156 * Library._ui_scale, 0, 12 * Library._ui_scale)
    title.Parent = header
    
    local titleConstraint = Instance.new("UITextSizeConstraint")
    titleConstraint.MaxTextSize = 12 * Library._ui_scale
    titleConstraint.MinTextSize = 12 * Library._ui_scale
    titleConstraint.Parent = title
    
    local arrow = Instance.new("ImageLabel")
    arrow.Name = "Arrow"
    arrow.Image = "rbxassetid://136776761805636"
    arrow.ImageTransparency = 0.5
    arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    arrow.BackgroundTransparency = 1
    arrow.BorderColor3 = Color3.fromRGB(0, 0, 0)
    arrow.BorderSizePixel = 0
    arrow.Position = UDim2.new(0.75, 0, 0.286, 0) -- Shifted left to avoid keybind
    arrow.Rotation = -90
    arrow.Size = UDim2.new(0, 11 * Library._ui_scale, 0, 11 * Library._ui_scale)
    arrow.Parent = header
    
    local settings = Instance.new("Frame")
    settings.Name = "Settings"
    settings.AnchorPoint = Vector2.new(0, 1)
    settings.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
    settings.BackgroundTransparency = 1
    settings.BorderColor3 = Color3.fromRGB(0, 0, 0)
    settings.BorderSizePixel = 0
    settings.ClipsDescendants = true
    settings.Position = UDim2.new(0, 0, 1, 0)
    settings.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 0)
    settings.Parent = module
    
    local settingsLayout = Instance.new("UIListLayout")
    settingsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    settingsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    settingsLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
    settingsLayout.Parent = settings
    
    local state = LoadValue(moduleName .. "_State", false, "Bool")
    local expanded = false
    local moduleData = {
        Module = module,
        Settings = settings,
        Header = header,
        Layout = settingsLayout,
        Expanded = expanded,
        State = state,
        Keybind = keybind,
        CurrentKey = "F",
        Callback = callback
    }
    
    local function updateModuleSize()
        if expanded then
            local contentHeight = settingsLayout.AbsoluteContentSize.Y
            local targetSize = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale + contentHeight + 10 * Library._ui_scale)
            local targetSettingsSize = UDim2.new(0, 237 * Library._ui_scale, 0, contentHeight + 10 * Library._ui_scale)
            
            CreateTween(module, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize})
            CreateTween(settings, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSettingsSize})
        else
            CreateTween(module, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale)})
            CreateTween(settings, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 237 * Library._ui_scale, 0, 0)})
        end
    end
    
    local function toggleModule(newState)
        state = newState
        moduleData.State = state
        SaveValue(moduleName .. "_State", "Bool", state)
        
        CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
            BackgroundColor3 = state and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(62, 62, 62)
        })
        
        if callback then
            callback(state)
        end
    end
    
    local function toggleSettings()
        expanded = not expanded
        moduleData.Expanded = expanded
        local targetRotation = expanded and 0 or -90
        
        updateModuleSize()
        CreateTween(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Rotation = targetRotation})
    end
    
    header.MouseButton1Click:Connect(function()
        toggleModule(not state)
    end)
    
    header.MouseButton1Down:Connect(function()
        local lastClick = tick()
        local connection
        connection = header.MouseButton1Up:Connect(function()
            if tick() - lastClick < 0.3 then
                toggleSettings()
            end
            connection:Disconnect()
        end)
    end)
    
    local listening = false
    keybind.MouseButton1Click:Connect(function()
        if not listening then
            listening = true
            keyString.Text = "..."
            keyString.TextTransparency = 0.2
            delete.Visible = false
            edit.Visible = true
            
            CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(100, 100, 100)})
            
            local connection
            connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if input.UserInputType == Enum.UserInputType.Keyboard and not gameProcessed then
                    local keyName = input.KeyCode.Name
                    moduleData.CurrentKey = keyName
                    keyString.Text = keyName
                    SaveValue(moduleName .. "_Keybind", "String", keyName)
                    keyString.TextTransparency = 0.5
                    listening = false
                    edit.Visible = false
                    keyString.Visible = true
                    
                    CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {
                        BackgroundColor3 = state and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(62, 62, 62)
                    })
                    
                    if connection then
                        connection:Disconnect()
                    end
                end
            end)
        end
    end)
    
    keybind.MouseButton2Click:Connect(function()
        moduleData.CurrentKey = "None"
        keyString.Text = "None"
        SaveValue(moduleName .. "_Keybind", "String", "None")
        keyString.Visible = true
        delete.Visible = false
        edit.Visible = true
    end)
    
    local activationConnection
    local function setupActivation()
        if activationConnection then
            activationConnection:Disconnect()
        end
        activationConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
            if not gameProcessed and not listening and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode.Name == moduleData.CurrentKey and moduleData.CurrentKey ~= "None" then
                toggleModule(not state)
            end
        end)
    end
    setupActivation()
    
    local savedKey = LoadValue(moduleName .. "_Keybind", "F", "String")
    moduleData.CurrentKey = savedKey
    keyString.Text = savedKey
    if savedKey == "None" then
        keyString.Visible = true
        delete.Visible = false
        edit.Visible = true
    else
        keyString.Visible = true
        delete.Visible = false
        edit.Visible = false
    end
    
    CreateTween(background, TweenInfo.new(0, Enum.EasingStyle.Quad), {
        BackgroundColor3 = state and Color3.fromRGB(100, 100, 100) or Color3.fromRGB(62, 62, 62)
    }):Play()
    if state and callback then
        callback(state)
    end
    
    settingsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        if expanded then
            updateModuleSize()
        end
    end)
    
    table.insert(tabData.Modules, moduleData)
    
    return moduleData
end
      
function FlowUI:CreateDropdown(parent, title, options, callback, moduleData)
	local default = LoadValue(title, options[1] or "None", "String")
	local dropdown = Instance.new("TextButton")
	dropdown.Name = "Dropdown"
	dropdown.Font = Enum.Font.SourceSans
	dropdown.Text = ""
	dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
	dropdown.TextSize = 14 * Library._ui_scale
	dropdown.AutoButtonColor = false
	dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	dropdown.BackgroundTransparency = 1
	dropdown.BorderColor3 = Color3.fromRGB(0, 0, 0)
	dropdown.BorderSizePixel = 0
	dropdown.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale)
	dropdown.Parent = parent
	
	local padding = Instance.new("UIPadding")
	padding.PaddingTop = UDim.new(0, 3 * Library._ui_scale)
	padding.Parent = dropdown
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Size = UDim2.new(0, 215 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = dropdown
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local box = Instance.new("TextButton")
	box.Name = "Box"
	box.AnchorPoint = Vector2.new(0.5, 0)
	box.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	box.BackgroundTransparency = 0.5
	box.BorderColor3 = Color3.fromRGB(0, 0, 0)
	box.BorderSizePixel = 0
	box.Position = UDim2.new(0.5, 0, 1.3, 0)
	box.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 18 * Library._ui_scale)
	box.Text = ""
	box.Parent = titleLabel
	
	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	boxCorner.Parent = box
	
	local selectedOption = Instance.new("TextLabel")
	selectedOption.Name = "Option"
	selectedOption.Font = Enum.Font.GothamMedium
	selectedOption.Text = default
	selectedOption.TextColor3 = Color3.fromRGB(255, 255, 255)
	selectedOption.TextSize = 12 * Library._ui_scale
	selectedOption.TextTransparency = 0.5
	selectedOption.TextXAlignment = Enum.TextXAlignment.Left
	selectedOption.AnchorPoint = Vector2.new(0.5, 0)
	selectedOption.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	selectedOption.BackgroundTransparency = 1
	selectedOption.BorderColor3 = Color3.fromRGB(0, 0, 0)
	selectedOption.BorderSizePixel = 0
	selectedOption.Position = UDim2.new(0.5, 0, 0.1, 0)
	selectedOption.Size = UDim2.new(0, 194 * Library._ui_scale, 0, 12 * Library._ui_scale)
	selectedOption.Parent = box
	
	local selectedConstraint = Instance.new("UITextSizeConstraint")
	selectedConstraint.MaxTextSize = 12 * Library._ui_scale
	selectedConstraint.MinTextSize = 12 * Library._ui_scale
	selectedConstraint.Parent = selectedOption
	
	local arrow = Instance.new("ImageLabel")
	arrow.Name = "Arrow"
	arrow.Image = "rbxassetid://136776761805636"
	arrow.ImageTransparency = 0.5
	arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	arrow.BackgroundTransparency = 1
	arrow.BorderColor3 = Color3.fromRGB(0, 0, 0)
	arrow.BorderSizePixel = 0
	arrow.Position = UDim2.new(0.93, 0, 0.25, 0)
	arrow.Rotation = -90
	arrow.Size = UDim2.new(0, 10 * Library._ui_scale, 0, 10 * Library._ui_scale)
	arrow.Parent = box
	
	local optionsContainer = Instance.new("Frame")
	optionsContainer.Name = "Options"
	optionsContainer.AnchorPoint = Vector2.new(0.5, 0)
	optionsContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	optionsContainer.BackgroundTransparency = 0.5
	optionsContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
	optionsContainer.BorderSizePixel = 0
	optionsContainer.ClipsDescendants = true
	optionsContainer.Position = UDim2.new(0.5, 0, 1.1, 0)
	optionsContainer.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 0)
	optionsContainer.Visible = false
	optionsContainer.Parent = box
	optionsContainer.ZIndex = 10
	
	local optionsCorner = Instance.new("UICorner")
	optionsCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	optionsCorner.Parent = optionsContainer
	
	local optionsList = Instance.new("ScrollingFrame")
	optionsList.Name = "List"
	optionsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
	optionsList.CanvasSize = UDim2.new(0, 0, 0, 0)
	optionsList.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	optionsList.ScrollBarImageTransparency = 1
	optionsList.ScrollBarThickness = 0
	optionsList.Active = true
	optionsList.AnchorPoint = Vector2.new(0.5, 0)
	optionsList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	optionsList.BackgroundTransparency = 1
	optionsList.BorderColor3 = Color3.fromRGB(0, 0, 0)
	optionsList.BorderSizePixel = 0
	optionsList.Position = UDim2.new(0.5, 0, 0, 0)
	optionsList.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 85 * Library._ui_scale)
	optionsList.Parent = optionsContainer
	
	local optionsLayout = Instance.new("UIListLayout")
	optionsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	optionsLayout.Padding = UDim.new(0, 2 * Library._ui_scale)
	optionsLayout.Parent = optionsList
	
	for i, option in ipairs(options) do
		local optionButton = Instance.new("TextButton")
		optionButton.Name = "Option"
		optionButton.Font = Enum.Font.GothamMedium
		optionButton.Text = option
		optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		optionButton.TextSize = 12 * Library._ui_scale
		optionButton.TextTransparency = 0.5
		optionButton.TextXAlignment = Enum.TextXAlignment.Left
		optionButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		optionButton.BackgroundTransparency = 1
		optionButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
		optionButton.BorderSizePixel = 0
		optionButton.Size = UDim2.new(0, 205 * Library._ui_scale, 0, 17 * Library._ui_scale)
		optionButton.ZIndex = 15
		optionButton.Parent = optionsList
		
		local optionConstraint = Instance.new("UITextSizeConstraint")
		optionConstraint.MaxTextSize = 12 * Library._ui_scale
		optionConstraint.MinTextSize = 12 * Library._ui_scale
		optionConstraint.Parent = optionButton
		
		optionButton.MouseButton1Click:Connect(function()
			selectedOption.Text = option
			SaveValue(title, "String", option)
			optionsContainer.Visible = false
			
			TweenService:Create(optionsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 218 * Library._ui_scale, 0, 0)
			}):Play()
			TweenService:Create(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Rotation = -90
			}):Play()
			
			if moduleData and moduleData.UpdateSize then
				wait(0.1)
				moduleData.UpdateSize()
			end
			
			Config.Dropdowns[title] = {
				Dropdown = dropdown,
				Value = option,
				Callback = callback
			}
			
			if callback then
				callback(option, i)
			end
		end)
		
		optionButton.MouseEnter:Connect(function()
			TweenService:Create(optionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundTransparency = 0.8
			}):Play()
		end)
		
		optionButton.MouseLeave:Connect(function()
			TweenService:Create(optionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundTransparency = 1
			}):Play()
		end)
	end
	
	local isOpen = false
	box.MouseButton1Click:Connect(function()
		isOpen = not isOpen
		optionsContainer.Visible = isOpen
		local targetSize = isOpen and UDim2.new(0, 218 * Library._ui_scale, 0, math.min(85 * Library._ui_scale, #options * 17 * Library._ui_scale)) or UDim2.new(0, 218 * Library._ui_scale, 0, 0)
		local targetRotation = isOpen and 0 or -90
		
		dropdown.Size = isOpen and UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale + math.min(85 * Library._ui_scale, #options * 17 * Library._ui_scale)) or UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale)
		
		TweenService:Create(optionsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Size = targetSize
		}):Play()
		TweenService:Create(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Rotation = targetRotation
		}):Play()
		
		if moduleData and moduleData.UpdateSize then
			wait(0.1)
			moduleData.UpdateSize()
		end
	end)
	
	SaveValue(title, "String", default)
	
	Config.Dropdowns[title] = {
		Dropdown = dropdown,
		Value = default,
		Callback = callback
	}
	
	return dropdown
end

function FlowUI:CreateSlider(parent, title, min, max, default, callback)
	local defaultVal = LoadValue(title, default, "Int")
	local slider = Instance.new("TextButton")
	slider.Name = "Slider"
	slider.Font = Enum.Font.SourceSans
	slider.Text = ""
	slider.TextColor3 = Color3.fromRGB(0, 0, 0)
	slider.TextSize = 14 * Library._ui_scale
	slider.AutoButtonColor = false
	slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	slider.BackgroundTransparency = 1
	slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
	slider.BorderSizePixel = 0
	slider.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	slider.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.4, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = slider
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local valueLabel = Instance.new("TextLabel")
	valueLabel.Name = "Value"
	valueLabel.Font = Enum.Font.GothamMedium
	valueLabel.Text = tostring(defaultVal)
	valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	valueLabel.TextScaled = true
	valueLabel.TextSize = 14 * Library._ui_scale
	valueLabel.TextTransparency = 0.5
	valueLabel.TextWrapped = true
	valueLabel.TextXAlignment = Enum.TextXAlignment.Right
	valueLabel.AnchorPoint = Vector2.new(1, 0.5)
	valueLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	valueLabel.BackgroundTransparency = 1
	valueLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	valueLabel.BorderSizePixel = 0
	valueLabel.Position = UDim2.new(1, 0, 0.4, 0)
	valueLabel.Size = UDim2.new(0, 42 * Library._ui_scale, 0, 12 * Library._ui_scale)
	valueLabel.Parent = slider
	
	local valueConstraint = Instance.new("UITextSizeConstraint")
	valueConstraint.MaxTextSize = 12 * Library._ui_scale
	valueConstraint.MinTextSize = 12 * Library._ui_scale
	valueConstraint.Parent = valueLabel
	
	local drag = Instance.new("TextButton")
	drag.Name = "Drag"
	drag.AnchorPoint = Vector2.new(0.5, 1)
	drag.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	drag.BackgroundTransparency = 0.5
	drag.BorderColor3 = Color3.fromRGB(0, 0, 0)
	drag.BorderSizePixel = 0
	drag.Position = UDim2.new(0.5, 0, 0.8, 0)
	drag.Size = UDim2.new(0, 217 * Library._ui_scale, 0, 4 * Library._ui_scale)
	drag.Text = ""
	drag.Parent = slider
	
	local dragCorner = Instance.new("UICorner")
	dragCorner.Parent = drag
	
	local fill = Instance.new("Frame")
	fill.Name = "Fill"
	fill.AnchorPoint = Vector2.new(0, 0.5)
	fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	fill.BackgroundTransparency = 0.5
	fill.Position = UDim2.new(0, 0, 0.5, 0)
	fill.Size = UDim2.new((defaultVal - min) / (max - min), 0, 0, 4 * Library._ui_scale)
	fill.Parent = drag
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.Parent = fill
	
	local circle = Instance.new("Frame")
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.AnchorPoint = Vector2.new(1, 0.5)
	circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.BorderSizePixel = 0
	circle.Position = UDim2.new(1, 0, 0.5, 0)
	circle.Size = UDim2.new(0, 6 * Library._ui_scale, 0, 6 * Library._ui_scale)
	circle.Parent = fill
	
	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = circle
	
	local dragging = false
	local currentValue = defaultVal
	
	local function updateSlider(relativePos)
		relativePos = math.clamp(relativePos, 0, 1)
		currentValue = math.floor(min + (max - min) * relativePos + 0.5)
		valueLabel.Text = tostring(currentValue)
		SaveValue(title, "Int", currentValue)
		
		TweenService:Create(fill, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Size = UDim2.new(relativePos, 0, 0, 4 * Library._ui_scale)
		}):Play()
		
		Config.Sliders[title] = {
			Slider = slider,
			Value = currentValue,
			Min = min,
			Max = max,
			Callback = callback
		}
		
		if callback then
			callback(currentValue)
		end
	end
	
	drag.MouseButton1Down:Connect(function()
		dragging = true
		local mouse = game.Players.LocalPlayer:GetMouse()
		local relativePos = (mouse.X - drag.AbsolutePosition.X) / drag.AbsoluteSize.X
		updateSlider(relativePos)
	end)
	
	local dragMoveConnection
	drag.MouseButton1Down:Connect(function()
		dragMoveConnection = UserInputService.InputChanged:Connect(function(input)
			if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				local abs_pos = drag.AbsolutePosition
				local abs_size = drag.AbsoluteSize
				local input_x = input.Position.X
				local relativePos = (input_x - abs_pos.X) / abs_size.X
				updateSlider(relativePos)
			end
		end)
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = false
			if dragMoveConnection then
				dragMoveConnection:Disconnect()
			end
		end
	end)
	
	Config.Sliders[title] = {
		Slider = slider,
		Value = currentValue,
		Min = min,
		Max = max,
		Callback = callback
	}
	
	return slider
end

function FlowUI:CreateKeybind(parent, title, defaultKey, callback)
	local default = LoadValue(title, defaultKey or "R", "String")
	local keybind = Instance.new("TextButton")
	keybind.Name = "Keybind"
	keybind.Font = Enum.Font.SourceSans
	keybind.Text = ""
	keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
	keybind.TextSize = 14 * Library._ui_scale
	keybind.AutoButtonColor = false
	keybind.AnchorPoint = Vector2.new(1, 0.5)
	keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	keybind.BackgroundTransparency = 1
	keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
	keybind.BorderSizePixel = 0
	keybind.Position = UDim2.new(1, -33 * Library._ui_scale, 0.5, 0)
	keybind.Size = UDim2.new(0, 33 * Library._ui_scale, 0, 28 * Library._ui_scale)
	keybind.Parent = parent
	
	local background = Instance.new("Frame")
	background.Name = "Background"
	background.AnchorPoint = Vector2.new(0.5, 0.5)
	background.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
	background.BackgroundTransparency = 0.5
	background.BorderColor3 = Color3.fromRGB(0, 0, 0)
	background.BorderSizePixel = 0
	background.Position = UDim2.new(0.5, 0, 0.5, 0)
	background.Size = UDim2.new(0, 20 * Library._ui_scale, 0, 20 * Library._ui_scale)
	background.Parent = keybind
	
	local backgroundCorner = Instance.new("UICorner")
	backgroundCorner.CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	backgroundCorner.Parent = background
	
	local keyString = Instance.new("TextLabel")
	keyString.Name = "String"
	keyString.Font = Enum.Font.Gotham
	keyString.Text = default
	keyString.TextColor3 = Color3.fromRGB(255, 255, 255)
	keyString.TextSize = 10 * Library._ui_scale
	keyString.TextTransparency = 0.5
	keyString.AnchorPoint = Vector2.new(0.5, 0.5)
	keyString.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	keyString.BackgroundTransparency = 1
	keyString.BorderColor3 = Color3.fromRGB(0, 0, 0)
	keyString.BorderSizePixel = 0
	keyString.Position = UDim2.new(0.5, 0, 0.5, 0)
	keyString.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	keyString.Parent = background
	
	local stringConstraint = Instance.new("UITextSizeConstraint")
	stringConstraint.MaxTextSize = 11 * Library._ui_scale
	stringConstraint.MinTextSize = 11 * Library._ui_scale
	stringConstraint.Parent = keyString
	
	local titleLabel
	if not string.find(parent.Name, "Header") then
		titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "Title"
		titleLabel.Font = Enum.Font.Gotham
		titleLabel.Text = title
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.TextSize = 14 * Library._ui_scale
		titleLabel.TextTransparency = 0.5
		titleLabel.TextWrapped = true
		titleLabel.TextXAlignment = Enum.TextXAlignment.Left
		titleLabel.AnchorPoint = Vector2.new(0, 0.5)
		titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.BackgroundTransparency = 1
		titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
		titleLabel.BorderSizePixel = 0
		titleLabel.Position = UDim2.new(1, 0, 0.5, 0)
		titleLabel.Size = UDim2.new(0, 156 * Library._ui_scale, 0, 12 * Library._ui_scale)
		titleLabel.Parent = keybind
		
		local titleConstraint = Instance.new("UITextSizeConstraint")
		titleConstraint.MaxTextSize = 12 * Library._ui_scale
		titleConstraint.MinTextSize = 12 * Library._ui_scale
		titleConstraint.Parent = titleLabel
	end
	
	local listening = false
	local currentKey = default
	local connection = nil
	local activationConnection = nil
	
	local function setupActivation()
		if activationConnection then
			activationConnection:Disconnect()
		end
		
		activationConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if not gameProcessed and not listening and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode.Name == currentKey then
				if callback then
					callback(currentKey)
				end
			end
		end)
	end
	
	keybind.MouseButton1Click:Connect(function()
		if not listening then
			listening = true
			keyString.Text = "..."
			keyString.TextTransparency = 0.2
			
			CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(100, 100, 100)})
			
			connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
				if input.UserInputType == Enum.UserInputType.Keyboard and not gameProcessed then
					local keyName = input.KeyCode.Name
					currentKey = keyName
					keyString.Text = keyName
					SaveValue(title, "String", keyName)
					keyString.TextTransparency = 0.5
					listening = false
					
					CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(62, 62, 62)})
					
					if connection then
						connection:Disconnect()
						connection = nil
					end
					
					Config.Keybinds[title] = {
						Keybind = keybind,
						Key = currentKey,
						Callback = callback
					}
					
					setupActivation()
				end
			end)
		end
	end)
	
	setupActivation()
	
	SaveValue(title, "String", currentKey)
	
	Config.Keybinds[title] = {
		Keybind = keybind,
		Key = currentKey,
		Callback = callback
	}
	
	return keybind
end

function FlowUI:CreateToggle(parent, title, defaultState, callback)
	local default = LoadValue(title, defaultState or false, "Bool")
	local onColor = Color3.fromRGB(255, 255, 255)
	local offColor = Color3.fromRGB(60, 60, 60)
	local onCircleColor = onColor
	local offCircleColor = Color3.fromRGB(120, 120, 120)
	
	local toggle = Instance.new("TextButton")
	toggle.Name = "Toggle"
	toggle.Font = Enum.Font.SourceSans
	toggle.Text = ""
	toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
	toggle.TextSize = 14 * Library._ui_scale
	toggle.AutoButtonColor = false
	toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	toggle.BackgroundTransparency = 1
	toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	toggle.BorderSizePixel = 0
	toggle.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	toggle.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = toggle
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local toggleBG = Instance.new("Frame")
	toggleBG.Name = "ToggleBG"
	toggleBG.BackgroundTransparency = 0.7
	toggleBG.Position = UDim2.new(0.82, 0, 0.3, 0)
	toggleBG.BorderColor3 = Color3.fromRGB(0, 0, 0)
	toggleBG.Size = UDim2.new(0, 25 * Library._ui_scale, 0, 12 * Library._ui_scale)
	toggleBG.BorderSizePixel = 0
	toggleBG.BackgroundColor3 = default and onColor or offColor
	toggleBG.Parent = toggle
	
	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(1, 0)
	toggleCorner.Parent = toggleBG
	
	local circle = Instance.new("Frame")
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.AnchorPoint = Vector2.new(0, 0.5)
	circle.BackgroundTransparency = 0.2
	circle.Position = default and UDim2.new(0.53, 0, 0.5, 0) or UDim2.new(0, 0, 0.5, 0)
	circle.Name = "Circle"
	circle.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	circle.BorderSizePixel = 0
	circle.BackgroundColor3 = default and onCircleColor or offCircleColor
	circle.Parent = toggleBG
	
	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = circle
	
	local state = default
	
	toggle.MouseButton1Click:Connect(function()
		state = not state
		SaveValue(title, "Bool", state)
		
		if state then
			TweenService:Create(toggleBG, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onColor
			}):Play()

			TweenService:Create(circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onCircleColor,
				Position = UDim2.fromScale(0.53, 0.5)
			}):Play()
		else
			TweenService:Create(toggleBG, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offColor
			}):Play()

			TweenService:Create(circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offCircleColor,
				Position = UDim2.fromScale(0, 0.5)
			}):Play()
		end
		
		Config.Toggles[title] = {
			Toggle = toggle,
			State = state,
			Callback = callback
		}
		
		if callback then
			callback(state)
		end
	end)
	
	Config.Toggles[title] = {
		Toggle = toggle,
		State = state,
		Callback = callback
	}
	
	return toggle
end

function FlowUI:CreateCheckbox(parent, title, defaultState, callback)
	local default = LoadValue(title, defaultState or false, "Bool")
	local onColor = Color3.fromRGB(255, 255, 255)
	local offColor = Color3.fromRGB(60, 60, 60)
	
	local checkbox = Instance.new("TextButton")
	checkbox.Name = "Checkbox"
	checkbox.Font = Enum.Font.SourceSans
	checkbox.Text = ""
	checkbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	checkbox.TextSize = 14 * Library._ui_scale
	checkbox.AutoButtonColor = false
	checkbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	checkbox.BackgroundTransparency = 1
	checkbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	checkbox.BorderSizePixel = 0
	checkbox.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 20 * Library._ui_scale)
	checkbox.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.2
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 142 * Library._ui_scale, 0, 13 * Library._ui_scale)
	titleLabel.Parent = checkbox
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 11 * Library._ui_scale
	titleConstraint.MinTextSize = 11 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local box = Instance.new("Frame")
	box.Name = "Box"
	box.BorderColor3 = Color3.fromRGB(0, 0, 0)
	box.AnchorPoint = Vector2.new(1, 0.5)
	box.BackgroundTransparency = default and 0.7 or 0.9
	box.Position = UDim2.new(1, 0, 0.5, 0)
	box.Size = UDim2.new(0, 15 * Library._ui_scale, 0, 15 * Library._ui_scale)
	box.BorderSizePixel = 0
	box.BackgroundColor3 = default and onColor or offColor
	box.Parent = checkbox
	
	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	boxCorner.Parent = box
	
	local fill = Instance.new("Frame")
	fill.AnchorPoint = Vector2.new(0.5, 0.5)
	fill.BackgroundTransparency = 0.2
	fill.Position = UDim2.new(0.5, 0, 0.5, 0)
	fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
	fill.Name = "Fill"
	fill.BorderSizePixel = 0
	fill.BackgroundColor3 = onColor
	fill.Size = default and UDim2.fromOffset(9 * Library._ui_scale, 9 * Library._ui_scale) or UDim2.fromOffset(0, 0)
	fill.Parent = box
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.CornerRadius = UDim.new(0, 3 * Library._ui_scale)
	fillCorner.Parent = fill
	
	local state = default
	
	local function changeState(newState)
		state = newState
		SaveValue(title, "Bool", state)
		if state then
			TweenService:Create(box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onColor,
				BackgroundTransparency = 0.7
			}):Play()
			TweenService:Create(fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(9 * Library._ui_scale, 9 * Library._ui_scale)
			}):Play()
		else
			TweenService:Create(box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offColor,
				BackgroundTransparency = 0.9
			}):Play()
			TweenService:Create(fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(0, 0)
			}):Play()
		end
		
		Config.Checkboxes[title] = {
			Checkbox = checkbox,
			State = state,
			Callback = callback
		}
		
		if callback then
			callback(state)
		end
	end
	
	checkbox.MouseButton1Click:Connect(function()
		changeState(not state)
	end)
	
	local keybind = self:CreateKeybind(checkbox, title .. " Keybind", "None", function(key)
		if key == "None" then return end
		changeState(not state)
	end)
	keybind.Visible = false
	
	Config.Checkboxes[title] = {
		Checkbox = checkbox,
		State = state,
		Keybind = keybind,
		Callback = callback
	}
	
	return checkbox
end

function FlowUI:CreateTextBox(parent, title, default, callback)
	local defaultVal = LoadValue(title, default or "", "String")
	local textbox = Instance.new("TextButton")
	textbox.Name = "TextBox"
	textbox.Font = Enum.Font.SourceSans
	textbox.Text = ""
	textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	textbox.TextSize = 14 * Library._ui_scale
	textbox.AutoButtonColor = false
	textbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	textbox.BackgroundTransparency = 1
	textbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	textbox.BorderSizePixel = 0
	textbox.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	textbox.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.4, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = textbox
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local input = Instance.new("TextBox")
	input.Name = "Input"
	input.Font = Enum.Font.Gotham
	input.Text = defaultVal
	input.TextColor3 = Color3.fromRGB(255, 255, 255)
	input.TextSize = 12 * Library._ui_scale
	input.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	input.BackgroundTransparency = 0.5
	input.BorderColor3 = Color3.fromRGB(0, 0, 0)
	input.BorderSizePixel = 0
	input.Position = UDim2.new(0.5, 0, 0.7, 0)
	input.AnchorPoint = Vector2.new(0.5, 0)
	input.Size = UDim2.new(0, 217 * Library._ui_scale, 0, 18 * Library._ui_scale)
	input.TextXAlignment = Enum.TextXAlignment.Left
	input.Parent = textbox
	
	local inputCorner = Instance.new("UICorner")
	inputCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	inputCorner.Parent = input
	
	local inputConstraint = Instance.new("UITextSizeConstraint")
	inputConstraint.MaxTextSize = 12 * Library._ui_scale
	inputConstraint.MinTextSize = 12 * Library._ui_scale
	inputConstraint.Parent = input
	
	input.FocusLost:Connect(function(enterPressed)
		local text = input.Text
		SaveValue(title, "String", text)
		Config.TextBoxes[title] = {
			TextBox = textbox,
			Value = text,
			Callback = callback
		}
		if callback then
			callback(text, enterPressed)
		end
	end)
	
	input:GetPropertyChangedSignal("Text"):Connect(function()
		local text = input.Text
		Config.TextBoxes[title] = {
			TextBox = textbox,
			Value = text,
			Callback = callback
		}
	end)
	
	SaveValue(title, "String", defaultVal)
	
	return textbox
end

return FlowUI
